// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v7go

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-v7-go/sdk/go/v7-go/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type PropertyInputType struct {
	PropertyId string `pulumi:"propertyId"`
}

// PropertyInputTypeInput is an input type that accepts PropertyInputTypeArgs and PropertyInputTypeOutput values.
// You can construct a concrete instance of `PropertyInputTypeInput` via:
//
//	PropertyInputTypeArgs{...}
type PropertyInputTypeInput interface {
	pulumi.Input

	ToPropertyInputTypeOutput() PropertyInputTypeOutput
	ToPropertyInputTypeOutputWithContext(context.Context) PropertyInputTypeOutput
}

type PropertyInputTypeArgs struct {
	PropertyId pulumi.StringInput `pulumi:"propertyId"`
}

func (PropertyInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertyInputType)(nil)).Elem()
}

func (i PropertyInputTypeArgs) ToPropertyInputTypeOutput() PropertyInputTypeOutput {
	return i.ToPropertyInputTypeOutputWithContext(context.Background())
}

func (i PropertyInputTypeArgs) ToPropertyInputTypeOutputWithContext(ctx context.Context) PropertyInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyInputTypeOutput)
}

// PropertyInputTypeArrayInput is an input type that accepts PropertyInputTypeArray and PropertyInputTypeArrayOutput values.
// You can construct a concrete instance of `PropertyInputTypeArrayInput` via:
//
//	PropertyInputTypeArray{ PropertyInputTypeArgs{...} }
type PropertyInputTypeArrayInput interface {
	pulumi.Input

	ToPropertyInputTypeArrayOutput() PropertyInputTypeArrayOutput
	ToPropertyInputTypeArrayOutputWithContext(context.Context) PropertyInputTypeArrayOutput
}

type PropertyInputTypeArray []PropertyInputTypeInput

func (PropertyInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PropertyInputType)(nil)).Elem()
}

func (i PropertyInputTypeArray) ToPropertyInputTypeArrayOutput() PropertyInputTypeArrayOutput {
	return i.ToPropertyInputTypeArrayOutputWithContext(context.Background())
}

func (i PropertyInputTypeArray) ToPropertyInputTypeArrayOutputWithContext(ctx context.Context) PropertyInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyInputTypeArrayOutput)
}

type PropertyInputTypeOutput struct{ *pulumi.OutputState }

func (PropertyInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertyInputType)(nil)).Elem()
}

func (o PropertyInputTypeOutput) ToPropertyInputTypeOutput() PropertyInputTypeOutput {
	return o
}

func (o PropertyInputTypeOutput) ToPropertyInputTypeOutputWithContext(ctx context.Context) PropertyInputTypeOutput {
	return o
}

func (o PropertyInputTypeOutput) PropertyId() pulumi.StringOutput {
	return o.ApplyT(func(v PropertyInputType) string { return v.PropertyId }).(pulumi.StringOutput)
}

type PropertyInputTypeArrayOutput struct{ *pulumi.OutputState }

func (PropertyInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PropertyInputType)(nil)).Elem()
}

func (o PropertyInputTypeArrayOutput) ToPropertyInputTypeArrayOutput() PropertyInputTypeArrayOutput {
	return o
}

func (o PropertyInputTypeArrayOutput) ToPropertyInputTypeArrayOutputWithContext(ctx context.Context) PropertyInputTypeArrayOutput {
	return o
}

func (o PropertyInputTypeArrayOutput) Index(i pulumi.IntInput) PropertyInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PropertyInputType {
		return vs[0].([]PropertyInputType)[vs[1].(int)]
	}).(PropertyInputTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyInputTypeInput)(nil)).Elem(), PropertyInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyInputTypeArrayInput)(nil)).Elem(), PropertyInputTypeArray{})
	pulumi.RegisterOutputType(PropertyInputTypeOutput{})
	pulumi.RegisterOutputType(PropertyInputTypeArrayOutput{})
}
